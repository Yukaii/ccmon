# ccmon Configuration File Example
# 
# This is an example configuration file for ccmon.
# Copy this file to one of the following locations:
#   - ./config.toml (current directory - highest priority)
#   - ~/.ccmon/config.toml (user config directory)
#
# You can use .toml, .yaml, or .json formats.
# 
# The application searches for configuration files in order:
# 1. Current directory (./config.{toml,yaml,json})
# 2. User config directory (~/.ccmon/config.{toml,yaml,json})
# 
# The first configuration file found will be used.
# If no configuration file is found, default values will be used.

[database]
# Path to the BoltDB database file
# Default: ~/.ccmon/ccmon.db
# The ~ will be expanded to your home directory
path = "~/.ccmon/ccmon.db"

[server]
# gRPC server address for OTLP receiver
# Default: 127.0.0.1:4317
# Default is localhost for security, but can be changed if needed
address = "127.0.0.1:4317"

[monitor]
# gRPC server address for query service
# Default: 127.0.0.1:4317
# Monitor connects to this address to query data from server
# Can be different from server.address if needed
server = "127.0.0.1:4317"

# Timezone for time filtering and display in monitor mode
# Default: "UTC"
# Examples: "UTC", "America/New_York", "Europe/London", "Asia/Tokyo"
# Use IANA timezone names (see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
# This affects:
#   - How hour/day/week/month filters are calculated (e.g., "last hour" in your timezone)
#   - How timestamps are displayed in the TUI table
# Internal processing always uses UTC for consistency
timezone = "UTC"

# Monitor refresh interval for updating data in TUI
# Default: "5s"
# Examples: "1s", "5s", "10s", "30s", "1m"
# Use Go duration format (see: https://pkg.go.dev/time#ParseDuration)
# Minimum: 1s, Maximum: 5m
# Note: Claude Code sends telemetry every ~5 seconds, so shorter intervals may not show new data
refresh_interval = "5s"

[claude]
# Claude subscription plan
# Default: "unset"
# Valid values: "unset", "pro", "max", "max20"
# Used for automatic token limit detection when using block tracking (-b flag)
plan = "unset"

# Custom token limit override
# Default: 0 (use plan defaults)
# Set to override default limits: pro=7000, max=35000, max20=140000
# Use with block tracking (-b flag) to monitor token usage within 5-hour blocks
# Example: max_tokens = 10000
max_tokens = 0